#![doc = include_str!("../docs/lib.md")]

use std::time::Duration;

pub use converter::{CommandReceiver, CommandSender, Converter, MessageReceiver, MessageSender};

mod converter;
mod time_parsing;

#[derive(Clone, Debug)]
/// The structure that contains the settings for [`Converter`].
pub struct Settings {
    /// The path of the video to be converted into an animated GIF.
    video_path: String,
    /// The frame rate (per second) to use for the for the created animated GIF.
    gif_fps: u16,
    /// The width of the created animated GIF.
    gif_width: u16,
}

impl Settings {
    /// The default frame rate used for the generated animated GIF.
    /// 
    /// NOTE: This is the only allowed value for now; i.e. the API does
    /// not allow modifying this value.
    pub const STANDARD_FPS: u16 = 10;

    /// A factory method that takes in the `video_path` and the `width`.
    pub fn with_standard_fps(video_path: String, width: u16) -> Self {
        Self {
            video_path,
            gif_fps: Self::STANDARD_FPS,
            gif_width: width,
        }
    }

    /// A convenience method that can be used to generate the
    /// value of FFmpeg's `-filter_complex` flag.
    fn generate_filter_complex(&self) -> String {
        format!(
            "fps={},scale={}:-1[s]; [s]split[a][b]; [a]palettegen[palette]; [b][palette]paletteuse",
            self.gif_fps, self.gif_width
        )
    }
}

#[derive(Debug, Clone)]
/// An error generated by the [`Converter`].
pub enum Error {
    /// Contains the error code returned by the FFmpeg child process.
    ExitCode(i32),
    /// A confirmation that signals that the conversion job has been cancelled.
    Cancelled,
    /// Contains the [`std::io::Error`] returned by calling `.wait` on the child
    /// process.
    ChildProcess(std::sync::Arc<std::io::Error>),
}

impl std::error::Error for Error {}

impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[derive(Debug, Clone)]
/// A message (i.e. an event) sent to the application by [`Converter`].
pub enum Message {
    /// The raw bytes of the successfully generated animated GIF.
    Success(Vec<u8>),
    /// An error message, containing the [`Error`].
    Error(Error),
    /// The progress (between 0.0 and 1.0) made by the converter, estimated
    /// by taking the number of processed frames divided by the total number
    /// of frames.
    ///
    /// NOTE: Progress messages do start to be received right away. The [`Message::VideoDuration`]
    /// will be sent first.
    Progress(f64),
    ///Â The video duration, determined by FFmpeg as a first step in creating
    /// the animated GIF. Note that this event comes before the [`Message::Progress`]
    /// event.
    VideoDuration(Duration),
}

#[derive(Debug, Clone)]
/// A command sent to the [`Converter`] by the application.
pub enum Command {
    /// A request to terminate the conversion job. If successfully,
    /// this command will result in an [`Error::Cancelled`] delivered
    /// as a [`Message::Error`].
    Cancel,
}
